from __future__ import annotations
from sqlalchemy.ext.asyncio import AsyncSession
from component.dbsession import get_webdbsession
import Service
from component.cache import cache
from fastapi import APIRouter,Depends
from sqlalchemy.exc import IntegrityError
import settings
from typing import Dict,Any
from common import get_token,CommonResponse,XTJsonResponse
from .__init__ import dependencies
from component.fastQL import fastQuery,fastAdd,fastDel
{{imports}}

router = APIRouter(
    dependencies=dependencies
)





{% for operation in operations %}
# <editor-fold desc="{{operation.summary}}">
@router.{{operation.type}}('{{operation.snake_case_path}}',

    {% if operation.additional_responses %}
        , responses={
            {% for status_code, models in operation.additional_responses.items() %}
                '{{ status_code }}': {
                {% for key, model in models.items() %}
                    '{{ key }}': {{ model }}{% if not loop.last %},{% endif %}
                {% endfor %}
                }{% if not loop.last %},{% endif %}
            {% endfor %}
        }
    {% endif %})
async def {{operation.summary}}({{operation.arguments}}{% if operation.arguments %},{% endif %} db: AsyncSession=Depends(get_webdbsession),token:settings.UserTokenData=Depends(get_token))->Any:
    {%- if operation.summary %}
    """
    {{ operation.summary }}
    """
    {%- endif %}







    return {{operation.return_type}}()
# </editor-fold>




{% endfor %}
